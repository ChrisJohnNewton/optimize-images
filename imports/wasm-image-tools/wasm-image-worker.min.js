self.importScripts("./wasm_image_loader.min.js","./wasm_avif.min.js","./wasm_webp.min.js","./wasm_mozjpeg.min.js"),self.onmessage=e=>{const buffer=e.data[0],originalImageType=e.data[1],originalImageWidth=e.data[2],originalImageHeight=e.data[3],encodedImageWidth=e.data[4],encodedImageHeight=originalImageHeight*(encodedImageWidth/originalImageWidth).toFixed(5),fileTypeList=new Array;for(fileType of e.data[5])fileTypeList.push(eval(fileType));"image/jpeg"===originalImageType||"image/jpg"===originalImageType?(self.channels=4,self.colorSpace=12):(self.channels=3,self.colorSpace=6),Promise.all([wasm_image_loader(),...fileTypeList]).then(resultsArray=>{const decoder=resultsArray[0],encoderArray=resultsArray.slice(1);let decoded=decoder.decode(buffer,buffer.length,self.channels);encodedImageWidth<originalImageWidth&&(decoder.free(),decoded=decoder.resize(decoded,originalImageWidth,originalImageHeight,self.channels,encodedImageWidth,encodedImageHeight)),console.log(`originalImageWidth: ${originalImageWidth}\noriginalImageHeight: ${originalImageHeight}\nencodedImageWidth: ${encodedImageWidth}\nencodedImageHeight: ${encodedImageHeight}`),encoderArray.forEach((encoder,key,encoderArray)=>{if(encoder.hasOwnProperty("AVIF_PIXEL_FORMAT")){const encoded=new Uint8ClampedArray(encoder.encode(decoded,encodedImageWidth,encodedImageHeight,self.channels,{minQuantizer:29,maxQuantizer:31,minQuantizerAlpha:29,maxQuantizerAlpha:31,tileRowsLog2:0,tileColsLog2:0,speed:10},3));Object.is(encoderArray.length-1,key)?self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!0,"avif"]):self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!1,"avif"])}else if(encoder.hasOwnProperty("WebPImageHint")){const encoded=new Uint8ClampedArray(encoder.encode(decoded,encodedImageWidth,encodedImageHeight,self.channels,{quality:75,target_size:0,target_PSNR:0,method:4,sns_strength:50,filter_strength:60,filter_sharpness:0,filter_type:1,partitions:0,segments:4,pass:1,show_compressed:0,preprocessing:0,autofilter:0,partition_limit:0,alpha_compression:1,alpha_filtering:1,alpha_quality:100,lossless:0,exact:0,image_hint:0,emulate_jpeg_size:0,thread_level:0,low_memory:0,near_lossless:100,use_delta_palette:0,use_sharp_yuv:0}));Object.is(encoderArray.length-1,key)?self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!0,"webp"]):self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!1,"webp"])}else if(encoder.hasOwnProperty("J_COLOR_SPACE")){const encoded=new Uint8ClampedArray(encoder.encode(decoded,encodedImageWidth,encodedImageHeight,self.channels,{quality:75,baseline:!1,arithmetic:!1,progressive:!0,optimize_coding:!0,smoothing:0,in_color_space:self.colorSpace,out_color_space:3,quant_table:3,trellis_multipass:!1,trellis_opt_zero:!1,trellis_opt_table:!1,trellis_loops:1,auto_subsample:!0,chroma_subsample:2,separate_chroma_quality:!1,chroma_quality:75}));Object.is(encoderArray.length-1,key)?self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!0,"jpg"]):self.postMessage([encoded,encodedImageWidth,encodedImageHeight,!1,"jpg"])}encoder.free()}),decoder.free()})};